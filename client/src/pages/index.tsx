import Head from "next/head";

import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import { zuAuthPopup } from "@pcd/zuauth";
import { ETHBERLIN04 } from "@pcd/zuauth/configs/ethberlin";

import { authenticate } from "@pcd/zuauth/server";
import { useState } from "react";

const inter = Inter({ subsets: ["latin"] });

// YOLO
const watermark = "12345";
const config = ETHBERLIN04;

type ProfileCreateParams = {
  attendeeSemaphoreId: string;
  url: string;
  title?: string;
  description?: string;
}

const createProfile = async (params: ProfileCreateParams) => {
  console.info(`Creating profile for ${JSON.stringify(params)}`);
  const reponse = await fetch(`${process.env.NEXT_PUBLIC_FEED_SERVICE}/profile`, {
    body: JSON.stringify(params),
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
  });

  if (!reponse.ok) {
    throw new Error(`Failed to create profile with status ${reponse.status} and text: ${await reponse.text()}`);
  }

  const data = await reponse.json();

  console.info(`Profile created with data: ${JSON.stringify(data)}`);
}

export default function Home() {
  const [pcdString, setPcdString] = useState<string | null>(null);
  const [title, setTitle] = useState<string>("Title Text");


  const onClick = async () => {
    const result = await zuAuthPopup({
      fieldsToReveal: {
        revealAttendeeSemaphoreId: true,
      },
      watermark,
      config,
    });

    if (result.type !== 'pcd') {
      throw new Error('Unexpected result type');
    }

    const authResult = await authenticate(result.pcdStr, watermark, config);

    if (!authResult.claim.partialTicket.attendeeSemaphoreId) {
      throw new Error('No attendeeSemaphoreId');
    }

    setPcdString(result.pcdStr);

    await createProfile({
      attendeeSemaphoreId: authResult.claim.partialTicket.attendeeSemaphoreId,
      url: 'https://upload.wikimedia.org/wikipedia/commons/thumb/c/c1/Variegated_golden_frog_%28Mantella_baroni%29_Ranomafana.jpg/2560px-Variegated_golden_frog_%28Mantella_baroni%29_Ranomafana.jpg',
      title,
      description: 'Description Text',
    });
    // Might be needed for adding a feed in the future
    // const reqq = {
    //   "type": "ProveAndAdd",
    //   "returnUrl": location.href,
    //   "pcdType": "semaphore-signature-pcd",
    //   "args": {
    //     "identity": { "argumentType": "PCD", "pcdType": "semaphore-identity-pcd", "userProvided": true },
    //     "signedMessage": { "argumentType": ArgumentTypeName.String, "value": text, "userProvided": false }
    //   },
    //   // "options": { "title": "Semaphore Signature Proof" },
    //   "returnPCD": false,
    //   "postMessage": false,
    //   folder:'DMs'
    // };
  };
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
       <button onClick={onClick}>Press</button>
       <input value={title} onChange={(e) => setTitle(e.target.value)} />
       <p>
        Debug: {pcdString}
       </p>
      </main>
    </>
  );
}
